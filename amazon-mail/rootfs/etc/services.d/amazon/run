#!/usr/bin/with-contenv bashio
set -euo pipefail

# Werte aus der Add-on-Konfiguration lesen
IMAP_SERVER="$(bashio::config 'IMAP_SERVER')"
EMAIL_USER="$(bashio::config 'EMAIL_USER')"
EMAIL_PASS="$(bashio::config 'EMAIL_PASS')"
ANZAHL_MAILS="$(bashio::config 'ANZAHL_MAILS')"
DEBUG_VAL="$(bashio::config 'DEBUG' 2>/dev/null || echo false)"
POLL_INTERVAL="$(bashio::config 'POLL_INTERVAL' 2>/dev/null || echo 14400)"

# Validierung
if [ -z "${EMAIL_USER}" ] || [ -z "${EMAIL_PASS}" ]; then
  bashio::log.fatal "EMAIL_USER/EMAIL_PASS nicht gesetzt. Bitte im Add-on → Konfiguration eintragen und speichern."
  exit 1
fi
if [ -z "${IMAP_SERVER}" ]; then
  bashio::log.fatal "IMAP_SERVER nicht gesetzt."
  exit 1
fi

# Maskiert loggen
MASKED_PASS="******"
bashio::log.info "Konfig: IMAP_SERVER=${IMAP_SERVER}, EMAIL_USER=${EMAIL_USER}, ANZAHL_MAILS=${ANZAHL_MAILS}, DEBUG=${DEBUG_VAL}, POLL_INTERVAL=${POLL_INTERVAL}"

# Für das Python-Skript exportieren
export IMAP_SERVER EMAIL_USER EMAIL_PASS ANZAHL_MAILS DEBUG="${DEBUG_VAL}"

mkdir -p /data

# Loop, damit Logs sichtbar bleiben und Ergebnis persistiert
while true; do
  bashio::log.info "Starte amazon.py ..."
  if python3 -u /app/amazon.py 2>&1 | tee /data/last.json; then
    bashio::log.info "amazon.py fertig."
  else
    bashio::log.error "Fehler beim Ausführen von amazon.py"
  fi
  bashio::log.info "Warte ${POLL_INTERVAL}s bis zum nächsten Lauf ..."
  sleep "${POLL_INTERVAL}"
done